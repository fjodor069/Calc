// CalcDoc.h : interface of the CCalcDoc class
//
// this class is generated by the MFC wizard

#pragma once

//// constants and enums 
//const int HEADER_WIDTH = 1000;
//const int HEADER_HEIGHT = 500;
//const int COL_WIDTH = 4000;
//const int COL_HEIGHT = 1000;
//const int ROW_HEIGHT = 20;
//const int TOTAL_WIDTH = HEADER_WIDTH + COLS * COL_WIDTH;
//const int TOTAL_HEIGTH = HEADER_HEIGHT  + ROWS * ROW_HEIGHT;

enum CalcState {CS_MARK, CS_EDIT};

//#include "Caret.h"
//#include "Reference.h"
//#include "CellMatrix.h"

class CCalcDoc : public CDocument
{
protected: // create from serialization only
	CCalcDoc();
	DECLARE_DYNCREATE(CCalcDoc)

// Attributes
public:

// Operations
public:

// Overrides
public:
	virtual BOOL OnNewDocument();
	virtual void Serialize(CArchive& ar);

// Implementation
public:
	virtual ~CCalcDoc();
#ifdef _DEBUG
	virtual void AssertValid() const;
	virtual void Dump(CDumpContext& dc) const;
#endif

protected:

// Generated message map functions (for menu items)
protected:
	DECLARE_MESSAGE_MAP()
public:
	afx_msg void OnUpdateEditPaste(CCmdUI *pCmdUI);
	afx_msg void OnAlignmentHorizontalleft();
	afx_msg void OnEditCopy();

// user methods and members 
private:
	Utility::Caret m_Caret;
	CalcState m_eCalcStatus;
	KeyboardState m_eKeyboardState;
	int m_iInputIndex;
	Reference m_rfEdit, m_rfFirstMark, m_rfLastMark, m_rfMinCopy, m_rfMaxCopy;
	CellMatrix m_cellMatrix, m_copyMatrix;
	TSetMatrix m_tSetMatrix;

public:
	CellMatrix* GetCellMatrix() {return &m_cellMatrix;}
	int GetCalcStatus() {return m_eCalcStatus;}
	Utility::Caret* GetCaret() {return &m_Caret;}
	Reference GetEdit() const {return m_rfEdit;}
	Reference GetFirstMark() const {return m_rfFirstMark;}
	Reference GetLastMark() const {return m_rfLastMark;}
	void RepaintEditArea();
	void RepaintMarkedArea();
	void RepaintSet(const ReferenceSet& repaintSet);
	void DoubleClick(Reference rfCell, CPoint ptMouse, CDC* pDC);
	void MakeCellVisible(Reference rfCell);
	void MakeCellVisible(int iRow, int iCol);
	void UpdateCaret();
	void UnmarkAndMark(int iMinRow, int iMinCol, int iMaxRow, int iMaxCol);
	void KeyDown(UINT uChar, CDC* pDC, BOOL bShiftKeyDown);
	void CharDown(UINT uChar, CDC* pDC);
	void LeftArrowKey(BOOL bShiftKeyDown);
	void RightArrowKey(BOOL bShiftKeyDown);
	void UpArrowKey(BOOL bShiftKeyDown);
	void DownArrowKey(BOOL bShiftKeyDown);
	void HomeKey(BOOL bShiftKeyDown);
	void EndKey(BOOL bShiftKeyDown);
	void DeleteKey(CDC* pDC);
	void BackspaceKey(CDC* pDC);

	
};


